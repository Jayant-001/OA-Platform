import { Contest } from "./types";

export const contests: Contest[] = [
    {
        id: "1",
        title: "Weekly Contest 1",
        description: "Solve algorithmic problems",
        startTime: new Date(Date.now() + 86400000), // Tomorrow
        duration: 120,
        problemCount: 4,
        status: "upcoming",
        rules: ["No external help", "Individual participation only"],
    },
    {
        id: "2",
        title: "Weekly Contest 2",
        description: "Solve algorithmic problems",
        startTime: new Date(Date.now() + 86400000), // Tomorrow
        duration: 120,
        problemCount: 4,
        status: "upcoming",
        rules: ["No external help", "Individual participation only"],
    },
    {
        id: "3",
        title: "Weekly Contest 3",
        description: "Solve algorithmic problems",
        startTime: new Date(Date.now() + 86400000), // Tomorrow
        duration: 120,
        problemCount: 4,
        status: "upcoming",
        rules: ["No external help", "Individual participation only"],
    },
];

export const problems = [
    {
        id: "1",
        description: `<p>You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri].</p><p><br></p><p>Each queries[i] represents the following action on nums:</p><p><br></p><p>Decrement the value at each index in the range [li, ri] in nums by at most 1.</p><p>The amount by which the value is decremented can be chosen independently for each index.</p><p>A Zero Array is an array with all its elements equal to 0.</p><p><br></p><p>Return the maximum number of elements that can be removed from queries, such that nums can still be converted to a zero array using the remaining queries. If it is not possible to convert nums to a zero array, return -1.</p><p><br></p><h2><strong>Example 1:</strong></h2><p><br></p><p><strong>Input:</strong> nums = [2,0,2], queries = [[0,2],[0,2],[1,1]]</p><p><br></p><h3><strong>Output:</strong> 1</h3><p><br></p><p><strong>Explanation:</strong></p><p><br></p><p>After removing queries[2], nums can still be converted to a zero array.</p><p><br></p><p>Using queries[0], decrement nums[0] and nums[2] by 1 and nums[1] by 0.</p><p>Using queries[1], decrement nums[0] and nums[2] by 1 and nums[1] by 0.</p><p><br></p><h2><strong>Example 2:</strong></h2><p><br></p><p><strong>Input:</strong> nums = [1,1,1,1], queries = [[1,3],[0,2],[1,3],[1,2]]</p><p><br></p><p><strong>Output:</strong> 2</p><p><br></p><p><strong>Explanation:</strong></p><p><br></p><p>We can remove queries[2] and queries[3].</p><p><br></p><h2><strong>Example 3:</strong></h2><p><br></p><p><strong>Input:</strong> nums = [1,2,3,4], queries = [[0,3]]</p><p><br></p><p><strong>Output:</strong> -1</p><p><br></p><p><strong>Explanation:</strong></p><p><br></p><p>nums cannot be converted to a zero array even after using all the queries.</p><p><br></p><h2><strong>Constraints:</strong></h2><p><br></p><ol><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>1 &lt;= nums.length &lt;= 10<sup>5</sup></li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>0 &lt;= nums[i] &lt;= 10<sup>5</sup></li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>1 &lt;= queries.length &lt;= 10<sup>5</sup></li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>queries[i].length == 2</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>0 &lt;= li &lt;= ri &lt; nums.length</li></ol>`,
        title: "Two Sum",
        difficulty: "easy",
        acceptance: 48.5,
        tags: ["Array", "Hash Table"],
        solved: false,
        points: 100,
    },
    {
        id: "2",
        title: "Add Two Numbers",
        difficulty: "medium",
        acceptance: 39.2,
        tags: ["Linked List", "Math"],
        solved: false,
        points: 200,
    },
    {
        id: "3",
        title: "Longest Substring Without Repeating Characters",
        difficulty: "medium",
        acceptance: 33.8,
        tags: ["String", "Sliding Window", "Hash Table"],
        solved: false,
        points: 200,
    },
    {
        id: "4",
        title: "Median of Two Sorted Arrays",
        difficulty: "hard",
        acceptance: 35.1,
        tags: ["Array", "Binary Search", "Divide and Conquer"],
        solved: false,
        points: 300,
    },
    {
        id: "5",
        title: "Valid Parentheses",
        difficulty: "easy",
        acceptance: 40.5,
        tags: ["String", "Stack"],
        solved: false,
        points: 100,
    },
    {
        id: "6",
        title: "Merge K Sorted Lists",
        difficulty: "hard",
        acceptance: 45.7,
        tags: ["Linked List", "Divide and Conquer", "Heap"],
        solved: false,
        points: 300,
    },
    {
        id: "7",
        title: "Maximum Subarray",
        difficulty: "medium",
        acceptance: 49.5,
        tags: ["Array", "Dynamic Programming"],
        solved: false,
        points: 200,
    },
    {
        id: "8",
        title: "Binary Tree Level Order Traversal",
        difficulty: "medium",
        acceptance: 42.1,
        tags: ["Tree", "BFS"],
        solved: false,
        points: 200,
    },
    {
        id: "9",
        title: "Climbing Stairs",
        difficulty: "easy",
        acceptance: 51.2,
        tags: ["Dynamic Programming"],
        solved: false,
        points: 100,
    },
    {
        id: "10",
        title: "Word Search",
        difficulty: "medium",
        acceptance: 38.9,
        tags: ["Array", "Backtracking", "Matrix"],
        solved: false,
        points: 200,
    },
    {
        id: "11",
        title: "Trapping Rain Water",
        difficulty: "hard",
        acceptance: 36.3,
        tags: ["Array", "Two Pointers", "Dynamic Programming"],
        solved: false,
        points: 300,
    },
    {
        id: "12",
        title: "Best Time to Buy and Sell Stock",
        difficulty: "easy",
        acceptance: 54.3,
        tags: ["Array", "Dynamic Programming"],
        solved: false,
        points: 100,
    },
    {
        id: "13",
        title: "LRU Cache",
        difficulty: "medium",
        acceptance: 40.6,
        tags: ["Hash Table", "Linked List", "Design"],
        solved: false,
        points: 200,
    },
    {
        id: "14",
        title: "Number of Islands",
        difficulty: "medium",
        acceptance: 44.8,
        tags: ["Array", "DFS", "BFS", "Matrix"],
        solved: false,
        points: 200,
    },
    {
        id: "15",
        title: "Course Schedule",
        difficulty: "medium",
        acceptance: 41.7,
        tags: ["Graph", "DFS", "BFS"],
        solved: false,
        points: 200,
    },
    {
        id: "16",
        title: "Merge Intervals",
        difficulty: "medium",
        acceptance: 43.2,
        tags: ["Array", "Sorting"],
        solved: false,
        points: 200,
    },
    {
        id: "17",
        title: "Regular Expression Matching",
        difficulty: "hard",
        acceptance: 28.4,
        tags: ["String", "Dynamic Programming", "Recursion"],
        solved: false,
        points: 300,
    },
    {
        id: "18",
        title: "Palindrome Number",
        difficulty: "easy",
        acceptance: 52.1,
        tags: ["Math"],
        solved: false,
        points: 100,
    },
    {
        id: "19",
        title: "Longest Consecutive Sequence",
        difficulty: "medium",
        acceptance: 40.9,
        tags: ["Array", "Hash Table", "Union Find"],
        solved: false,
        points: 200,
    },
    {
        id: "20",
        title: "Minimum Window Substring",
        difficulty: "hard",
        acceptance: 31.2,
        tags: ["String", "Sliding Window", "Hash Table"],
        solved: false,
        points: 300,
    },
] as const;
